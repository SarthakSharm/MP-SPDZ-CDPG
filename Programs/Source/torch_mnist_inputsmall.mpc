import torch
import torch.nn as nn
import torchvision
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

custom = sint.Tensor([28,28])
custom.input_from(0)


#Loading the dataset 
data = []
for train in True, False:
    ds = torchvision.datasets.MNIST(root='/tmp', train=train, download=True)
    # normalize to [0,1] before input
    print(ds)
    print('The length of the dataset is : ', len(ds))
    if train == True:
        samples = sfix.input_tensor_via(0, ds.data / 255., binary=True)
    else:
        samples = sfix.input_tensor_via(0, ds.data[3:4] / 255., binary=True)
    print(samples)
    if train == True:
        labels = sint.input_tensor_via(0, ds.targets, binary=True, one_hot=True)
    else:
        labels = sint.input_tensor_via(0, ds.targets[3:4], binary=True, one_hot=True)   
    data += [(labels, samples)]
    print(data)
(training_labels, training_samples), (test_labels, test_samples) = data
print_ln('&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&')


net = nn.Sequential(
    nn.Flatten(),                      # Flatten the input image (28x28 pixels) into a 1D vector
    nn.Linear(28 * 28, 10)             # Fully connected layer (input size = 28 * 28, output size = 10 classes)
)

# Load the trained model into the new architecture
net.load_state_dict(torch.load('small_mnist.pth'))

# Set the model to evaluation mode
net.eval()

from Compiler import ml

layers = ml.layers_from_torch(net, training_samples.shape, 128, input_via=0)

ml.set_n_threads(3)

optimizer = ml.Optimizer(layers)

pred = optimizer.eval(custom, batch_size=1, top=True)

print_ln('Predicted Label: %s', pred[0].reveal())
