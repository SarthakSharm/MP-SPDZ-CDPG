# Prologue to read in the inputs
port=regint(10000)
listen(port)
socket_id = regint()
acceptclientconnection(socket_id, port)
v = sfix.read_from_socket(socket_id, 1, 784)

# Reshape to 28x28 for MNIST
image_data = np.array(v).reshape(image_size)  

# Convert the image into a tensor and prepare it for MP-SPDZ secure computation
image_data_tensor = torch.tensor(image_data, dtype=torch.float32)
secure_input = sfix.input_tensor_via(0, image_data_tensor / 255.0, binary=True)


layers = [
    nn.Conv2d(1, 20, 5),
    nn.ReLU(),
    nn.MaxPool2d(2),
    nn.Conv2d(20, 50, 5),
    nn.ReLU(),
    nn.MaxPool2d(2),
    nn.Flatten(),
    nn.ReLU(),
    nn.Linear(800, 500),
    nn.ReLU(),
    nn.Linear(500, 10)
]

if 'bn' in sys.argv:
    layers.insert(3, nn.BatchNorm2d(20))

net = nn.Sequential(*layers)

f = open('Player-Data/Binary-Output-P0-0')

state = net.state_dict()

for name in state:
    shape = state[name].shape
    if shape:
        size = numpy.prod(shape)
        print (name, shape, size)
        var = numpy.fromfile(f, 'double', count=size)
        var = var.reshape(shape)
        state[name] = torch.Tensor(var)

net.load_state_dict(state)


from Compiler import ml

layers = ml.layers_from_torch(net, training_samples.shape, 128, input_via=0)

ml.set_n_threads(8)

optimizer = ml.Optimizer(layers)

# Perform secure inference on the input image
pred = optimizer.eval(secure_input, batch_size=1, top=True)

# Epilogue to return the outputs (send the result via socket)
resp = Array(1, sint)
resp[0] = pred[0]
sint.write_to_socket(client_socket.fileno(), resp)
print("Predicted Label: %s", pred[0].reveal())